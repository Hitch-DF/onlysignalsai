{% extends 'base.html.twig' %}

{% block title %}
    {{ "Choisissez votre offre"|trans }}
{% endblock %}

{% block body %}
<div class="container my-5">
    <h1 class="mb-4 text-center text-light">{{ "Choisissez votre offre"|trans }}</h1>

    {% set anyActive = subscriptionPriceIds|length > 0 %}

    <div class="row g-4 mt-4">
        {% for price in plans %}
            {% set prod = price.product %}
            {% set pid  = price.id %}
            {% set isActive = pid in subscriptionPriceIds %}
            {% set isOneTime = price.type == 'one_time' %}
            {% set duration = price.product.metadata.duration ?? '' %}

            <div class="col-12 col-md-4">
                <div class="card bg-card text-light border {% if isOneTime %}border-warning{% else %}border-secondary{% endif %} shadow-sm hover-shadow transition h-100">
                    {% if prod.images|length > 0 %}
                        <img src="{{ prod.images[0] }}" class="card-img-top border-bottom border-secondary" alt="{{ prod.name }}">
                    {% endif %}

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title d-flex justify-content-between align-items-center">
                            {{ prod.name }}
                            {% if isOneTime %}
                                <span class="badge bg-warning text-dark">À vie</span>
                            {% endif %}
                        </h5>

                        {% if prod.description %}
                            <p class="card-text text-muted small">{{ prod.description }}</p>
                        {% endif %}

                        <p class="h3 mt-auto">
                            {{ (price.unit_amount / 100)|number_format(2, ',', ' ') }}
                            {{ price.currency|upper }}
                            {% if not isOneTime %}
                                <small class="text-muted">/ {{ price.recurring.interval|trans }}</small>
                            {% endif %}
                        </p>

                        {% if duration is not empty %}
                            <p class="small text-muted mb-2">
                                {{ 'Pendant'|trans ~ ' ' ~ duration|replace({
                                    'd': ' jour',
                                    'D': ' jour',
                                    'm': ' mois',
                                    'M': ' mois',
                                    'y': ' an',
                                    'Y': ' an'
                                }) }}
                            </p>
                        {% endif %}

                        {% if isActive %}
                            <p class="text-success small mb-2">
                                {{ "L'abonnement à ce plan se termine le"|trans }}
                                {{ subscriptionEndDates[pid]|date('d/m/Y') }}
                            </p>
                            <button class="btn btn-outline-secondary w-100" disabled>
                                {{ "Déjà abonné"|trans }}
                            </button>
                        {% else %}
                            {% if isOneTime or not anyActive %}
                                <button data-price-id="{{ pid }}" class="btn btn-primary w-100 mt-3 subscribe-btn">
                                    {{ isOneTime ? 'Acheter à vie'|trans : "S'abonner"|trans }}
                                </button>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://js.stripe.com/v3/"></script>
<script>
    document.querySelectorAll('.subscribe-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            const priceId = btn.dataset.priceId;
            let res, json;
            try {
                res = await fetch('{{ path('create_subscription_session') }}', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token('authenticate') }}'
                    },
                    body: JSON.stringify({ priceId })
                });
                json = await res.json();
            } catch (e) {
                return alert('Erreur réseau : ' + e.message);
            }

            if (!res.ok) {
                return alert(json.error || 'Une erreur est survenue');
            }

            const stripe = Stripe(json.publicKey);
            stripe.redirectToCheckout({ sessionId: json.sessionId })
                .then(r => r.error && alert(r.error.message));
        });
    });
</script>
{% endblock %}
